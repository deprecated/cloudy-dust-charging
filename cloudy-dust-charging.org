* Cloudy models of dust grain charging around luminous stars
+ The aim is to find \phi as a function of ionization parameter (and other parameters)
  + Mainly for OB stars, but may also try RSG/AGB case
+ This can then be used to study gas-grain decoupling in bow shocks
* TODO Initial tests
+ [X] Write an input file by hand
  + Start with something from test suite?
  + First attempt is [[file:models/test-dust.in]]
+ [ ] Run it and see what output we need to save
  #+BEGIN_SRC sh :eval no
  export D=~/Work/CLOUDY/cloudy/source
  cd models
  $D/cloudy.exe -p test-dust
  #+END_SRC

* TODO Production runs
+ [ ] Decide which approach to use?
  1. Python script to write multiple input, run with ~make -j 8~
  2. Work out how to use Cloudy grid command (need to install MPI?)
+ Do it



* Graphs
#+BEGIN_SRC python :return pltfile :results file :exports both
  from matplotlib import pyplot as plt
  import seaborn as sns
  from astropy.table import Table
  from astropy import units as u
  from astropy.constants import k_B

  pltfile = 'test-dust-tlusty.png'
  tab_ovr = Table.read("models/test-dust-tlusty.ovr",
                       format="ascii.commented_header", delimiter="\t")
  tab_gdrift = Table.read("models/test-dust-tlusty.gdrift",
                          format="ascii.commented_header", delimiter="\t")
  tab_gpot = Table.read("models/test-dust-tlusty.gpot",
                        format="ascii.commented_header", delimiter="\t")
  tab_phys = Table.read("models/test-dust-tlusty.phys",
                        format="ascii.commented_header", delimiter="\t")

  sns.set_palette("Reds_d", n_colors=10)
  sns.set_color_codes()
  fig, axes = plt.subplots(4, 1, sharex=True, figsize=(6, 9))
  radius_pc = (10**14.5 + tab_gdrift["Depth"])*u.cm.to(u.pc)
  kT_eV = (tab_ovr["Te"]*u.K*k_B).to(u.eV)

  axes[0].plot(radius_pc, tab_ovr["Te"])

  axes[1].plot(radius_pc, tab_phys["accel"])

  for gtype in tab_gdrift.colnames[1:]:
      if gtype.startswith('sil'):
          style = dict(lw=1.0, alpha=0.6, ls='-')
      else:
          style = dict(lw=0.6, alpha=1.0, ls='--')
      axes[-1].plot(radius_pc, tab_gdrift[gtype], label=gtype, **style)
      axes[-2].plot(radius_pc, tab_gpot[gtype], label=gtype, **style)

  axes[-2].plot(radius_pc, kT_eV)
  axes[-2].axhline(0.0, color='0.5', lw=0.5)
  axes[-1].legend(ncol=2, loc="lower left", fontsize="xx-small")
  axes[0].set(
      xscale="log",
      ylabel="Temperature, K",
      ylim=[0, None],
  )
  axes[1].set(
      yscale="log",
      ylabel="Acceleration",
  )
  axes[-2].set(
      xscale="log",
      yscale="symlog",
      #yticks=[-1, 0, 1, 10],
      ylabel="Grain potential, eV",
  )
  axes[-1].set(
      xscale="log",
      yscale="log",
      xlabel="Radius, pc",
      ylabel="Drift velocity, km/s"
  )
  sns.despine()
  fig.tight_layout(h_pad=0.1)
  fig.savefig(pltfile, dpi=300)
#+END_SRC

#+RESULTS:
[[file:test-dust-tlusty.png]]



* An improved mode for cloudy input files

#+BEGIN_SRC emacs-lisp
    (require 'generic-x) ;; we need this

    (define-generic-mode 
        'cloudy-input-mode                         ;; name of the mode to create
      '("# ")                           ;; comments start with '#'
      '("set" "stop" "hden" "table" "blackbody" "title" "element" "constant" "cmb" "table"
        "print" "save" "iterate" "time" "end" "cosmic ray" "coronal" "phi(h)"
        "abundances" "luminosity")                     ;; some keywords
      '(("\\(#\\($\\| .*\\)\\)" 1 'font-lock-comment-face t)
        ("\\(//\\($\\| .*\\)\\)" 1 'font-lock-comment-face t)
        ("=" . 'font-lock-operator-face)     ;; '=' is an operator
        ("\\b\\(scale\\|log\\|linear\\|file\\|units\\)\\b" . 'font-lock-constant-face)     
        ("\\b\\(no\\|end\\|stop\\)\\b" 1 'font-lock-negation-char-face t)     
        ("^title \\(.*\\)$" 1 'font-lock-doc-face t)     
        ("

  \\(.*\\)$" 1 'font-lock-doc-face t)     
        )     ;; 
      '("\\.in$")                      ;; files for which to activate this mode 
      nil                              ;; other functions to call
      "A mode for Cloudy input files"            ;; doc string for this mode
      )
#+END_SRC

#+RESULTS:
: cloudy-input-mode
